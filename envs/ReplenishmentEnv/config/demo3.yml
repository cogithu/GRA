# Demo config to show the structure
# items with * are necessary.

# * Whole env setting
env:
  mode:
    - name: train
      start_date: 2018/8/1
      end_date: 2021/6/30
      random_interception: True
    - name: validation
      start_date: 2021/7/1
      end_date: 2021/8/31
    - name: test
      start_date: 2021/9/1
      end_date: 2021/10/30
  horizon: 100                      # Horizon for random sample after reset. Default is 100.
  lookback_len: 11                  # Look back length setting in env.
  integerization_sku: True          # Whether to integerization sku in sell and replenishment. Default is False.
  warmup: replenish_by_last_demand  # Warmup lookback_len dates before start_date.
  # * Sku list for env.
  # sku_list in list are also supported like [SKU0, SKU1, SKU2]
  # sku_list file should start with SKU
  sku_list: ReplenishmentEnv/data/sku2778/sku5.sku_list.csv

# * Warehouse info
warehouse:
  - name: store1
    initial_balance: 0
    capacity: 1000
    unit_storage_cost: 0.01
    accept_sku: equal_accept
    upstream:
      - store2
    downstream:
      - consumer
    sku:
      dynamic_data:
        - name: procurement_cost
          file: ReplenishmentEnv/data/sku2778/sku2778.store2.selling_price.csv
        - name: selling_price
          file: ReplenishmentEnv/data/sku2778/sku2778.store1.selling_price.csv
        - name: demand
          file: ReplenishmentEnv/data/sku2778/sku2778.demand.csv
      static_data: ReplenishmentEnv/data/sku2778/sku2778.store1.info.csv
      shared_data:
        unit_order_cost: 10
        volume: 1
        storage_cost: 0.0025
        basic_holding_cost: 0.001
        backlog_ratio: 0.1
        overflow_cost_ratio: 0.5

  - name: store2
    initial_balance: 0
    capacity: 1000
    unit_storage_cost: 0.01
    accept_sku: equal_accept
    upstream:
      - store3
    downstream:
      - store1
    sku:
      dynamic_data:
        - name: procurement_cost
          file: ReplenishmentEnv/data/sku2778/sku2778.store2.selling_price.csv
        - name: selling_price
          file: ReplenishmentEnv/data/sku2778/sku2778.store2.selling_price.csv
      static_data: ReplenishmentEnv/data/sku2778/sku2778.store2.info.csv
      shared_data:
        unit_order_cost: 10
        volume: 1
        storage_cost: 0.0025
        basic_holding_cost: 0.001
        backlog_ratio: 0.1
        overflow_cost_ratio: 0.5

  - name: store3
    initial_balance: 0
    capacity: 1000
    unit_storage_cost: 0.01
    accept_sku: equal_accept
    upstream:
      - store4
    downstream:
      - store2
    sku:
      dynamic_data:
        - name: procurement_cost
          file: ReplenishmentEnv/data/sku2778/sku2778.store3.selling_price.csv
        - name: selling_price
          file: ReplenishmentEnv/data/sku2778/sku2778.store2.selling_price.csv
      static_data: ReplenishmentEnv/data/sku2778/sku2778.store2.info.csv
      shared_data:
        unit_order_cost: 10
        volume: 1
        storage_cost: 0.0025
        basic_holding_cost: 0.001
        backlog_ratio: 0.1
        overflow_cost_ratio: 0.5

  - name: store4
    initial_balance: 0
    capacity: 1000
    unit_storage_cost: 0.01
    accept_sku: equal_accept
    upstream:
      - super_vendor
    downstream:
      - store3
    sku:
      dynamic_data:
        - name: procurement_cost
          file: ReplenishmentEnv/data/sku2778/sku2778.super_vendor.selling_price.csv
        - name: selling_price
          file: ReplenishmentEnv/data/sku2778/sku2778.store3.selling_price.csv
      static_data: ReplenishmentEnv/data/sku2778/sku2778.store3.info.csv
      shared_data:
        unit_order_cost: 10
        volume: 1
        storage_cost: 0.0025
        basic_holding_cost: 0.001
        backlog_ratio: 0.1
        overflow_cost_ratio: 0.5


# * profit setting. profit is internal in env.
# Currently, reward1 and reward2 are supported.
profit_function: reward2

# * reward setting. profit is internal in env.
# Currently, reward1 and reward2 are supported.
reward_function: reward2

# * action setting. Currently, 4 mode for action are supported:
# continuous:             replenishment_quantity = action
# discrete:               replenishment_quantity = action_space[action]
# demand_mean_continuous: replenishment = action * demand_mean
# demand_mean_discrete:   replenishment = action_space[action] * demand_mean
action:
  mode: continuous  # demand_mean_discrete
  space: [
      0.00, 0.16, 0.33, 0.40, 0.45, 0.50, 0.55, 0.60, 0.66, 0.83, 
      1.00, 1.16, 1.33, 1.50, 1.66, 1.83, 2.00, 2.16, 2.33, 2.50, 
      2.66, 2.83, 3.00, 3.16, 3.33, 3.50, 3.66, 3.83, 4.00, 5.00, 
      6.00, 7.00, 9.00, 12.00
    ]

# * Output state for agents. 
# States will be passed as N * M matrix. 
# M is state count and N is agent count(current_state + lookback_state * lookback_length)
output_state:
  current_state:
    [selling_price, procurement_cost, vlt, volume, 
    unit_order_cost, replenish, excess, in_stock, in_transit]
  lookback_state:
    [demand]

visualization:
  output_path: output   # visualization output dir
  time_flag: True
  state:                # visualization state items
    [demand, sale, arrived, replenish,
    excess, accepted, in_stock, in_transit]